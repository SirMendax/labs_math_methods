import re
import pprint as p
import numpy as np
from scipy.sparse import csc_matrix

class Helper(object):

    def getMeta(firstName, lastName, group):
        metaData = {
            'Student: ': firstName + " " + lastName,
            'Group: ': group,
            }
        return metaData

    def getVector(fileName):
        with open(fileName, 'r') as vector:
            B = [int(current_place.rstrip().lstrip().replace('.','')) for current_place in vector.readlines()]
        return B

    def getMatrix(fileName):
        with open(fileName, 'r') as matrix:
            A =[[int(current_place) for current_place in filter(None, re.split('\s', row.replace('.','')))] for row in matrix]
        return A

    #function return array after add param to his element on position [rowIndex, colIndex]
    def paramAddArray(value, array, rowIndex, colIndex = None):
        bufArray = array.copy()
        if(colIndex == None):
            for i in range(len(array)):
                if(i == rowIndex):
                    bufArray[i] += value
                else:
                    bufArray[i] = bufArray[i]
        else:
            for i in range(len(array)):
               for j in range(len(array[0])):
                   if(i == rowIndex and j == colIndex):
                       bufArray[i][j] += value
                   else:
                       bufArray[i][j] = bufArray[i][j]
        return bufArray

    #function return real band matrix
    def getRealBandMatrix(A):
        numMainDiag = searchElement.searchMainDiag(A)
        lengthRow = len(A[0])
        lengthCol = len(A)
        array = np.zeros((lengthRow,lengthRow))
        for i in range(lengthCol):
            num = numMainDiag - i
            if(i == numMainDiag):
                array += np.diagflat(A[i])
            elif(i > numMainDiag):
                array += np.diagflat(A[i][:lengthRow+num], num)
            elif(i < numMainDiag):
                array += np.diagflat(A[i][num:], num)
        return array

    def getRealBandPositiveDefiniteMatrix(A):
        numMainDiag = searchElement.searchMainDiag(A)
        lengthRow = len(A[0])
        lengthCol = len(A)
        array = np.zeros((lengthRow,lengthRow))
        for i in range(lengthCol):
            num = numMainDiag - i
            if(i == numMainDiag):
                array += np.diagflat(A[i])
            else:
                array += np.diagflat(A[i][num:], num)
                array += np.diagflat(A[i][num:], -num)
        return array

    def getCscMatrix(A):
        inRow = A[0] - 1
        inCol = A[1] - 1
        val = A[2]
        return csc_matrix((val, (inRow, inCol)), shape=(27, 27)).toarray()

class searchElement(object):
    @staticmethod
    def searchMainDiag(array):
        for i in range(len(array)):
            if(array[i][0] != 0):
                return i
