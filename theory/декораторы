def timeit(func):
    def wrapper(*args, **kwargs):
        start = datetime.now()
        result = func(*args, **kwargs)
        print(datetime.now() - start)
        return result
    return wrapper


@timeit
def one(n):
    l = []
    for i in range(10**n)
        if i % 2 == 0:
            l.append(i)
    return l


@timeit
def two(n):
    return [x for x in range(10**n) if x % 2 == 0]



l1 = one()
l2 = two()

Это было бы эквивалентно следующему выражению:

l3 = timeit(one)(10) // timeit(one) - вернет просто функцию


Более сложный вариант:
def timeit(arg):
    print(arg)
    def outer(func):
        def wrapper(*args, **kwargs):
            start = datetime.now()
            result = func(*args, **kwargs)
            print(datetime.now() - start)
            return result
        return wrapper
    return outer

@timeit('name')
def one(n):
    l = []
    for i in range(10**n)
        if i % 2 == 0:
            l.append(i)
    return l


@timeit('name')
def two(n):
    return [x for x in range(10**n) if x % 2 == 0]


l1 = timeit('name')(one)(10)
